name: CI Pipeline - Build and Test .NET App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/timedeposit-api

jobs:
  # Stage 1: Build and Push to Container Registry
  build-and-push:
    name: Build and Push Time Deposit API
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    services:
      # PostgreSQL service for build-time tests
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: timedeposit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Create additional PostgreSQL user
        run: |
          # Wait for postgres to be ready
          sleep 10
          # Create the user that your app expects
          PGPASSWORD=postgres psql -h localhost -U postgres -d timedeposit_test -c "CREATE USER ahmadmuhaidat WITH PASSWORD 'test_password';"
          PGPASSWORD=postgres psql -h localhost -U postgres -d timedeposit_test -c "GRANT ALL PRIVILEGES ON DATABASE timedeposit_test TO ahmadmuhaidat;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d timedeposit_test -c "ALTER USER ahmadmuhaidat CREATEDB;"

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: |
          echo "üìÅ Current directory structure:"
          ls -la
          echo "üîç Looking for .csproj files:"
          find . -name "*.csproj" -type f
          echo "üì¶ Building application..."
          dotnet build --no-restore --configuration Release

      - name: Run unit tests
        run: |
          # Run unit tests (excluding integration tests)
          dotnet test --no-build --configuration Release --verbosity normal \
            --filter "FullyQualifiedName!~IntegrationTest&FullyQualifiedName!~IT" \
            --logger trx --results-directory TestResults/Unit

      - name: Publish application
        run: |
          # Publish the TimeDepositAPI application (project file is in root)
          dotnet publish TimeDepositAPI.csproj \
            --configuration Release \
            --output ./publish \
            --no-restore --no-build

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM mcr.microsoft.com/dotnet/aspnet:9.0
          WORKDIR /app
          EXPOSE 5000
          
          # Copy the published app
          COPY ./publish .
          
          # Set environment variables
          ENV ASPNETCORE_ENVIRONMENT=Testing
          ENV ASPNETCORE_URLS=http://+:5000
          
          # Add health check
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:5000/health || exit 1
          
          ENTRYPOINT ["dotnet", "TimeDepositAPI.dll"]
          EOF

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: TestResults/Unit/
          retention-days: 7

    outputs:
      image-tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      image-digest: ${{ steps.build.outputs.digest }}

  # Stage 2: Deploy and Test
  deploy-and-test:
    name: Deploy API and Run Automation Tests
    runs-on: ubuntu-latest
    needs: build-and-push
    if: needs.build-and-push.result == 'success'

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Java 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: Create test network
        run: |
          docker network create test-network

      - name: Start PostgreSQL for testing
        run: |
          docker run -d \
            --name postgres-test \
            --network test-network \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=timedeposit_test \
            -p 5432:5432 \
            postgres:13
          
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          timeout=60
          while ! docker exec postgres-test pg_isready -U postgres 2>/dev/null; do
            if [ $timeout -le 0 ]; then
              echo "PostgreSQL not ready after 60 seconds"
              docker logs postgres-test
              exit 1
            fi
            sleep 2
            timeout=$((timeout-2))
            echo "Waiting for PostgreSQL... ($timeout seconds left)"
          done
          
          # Create the user
          docker exec postgres-test psql -U postgres -d timedeposit_test -c "CREATE USER ahmadmuhaidat WITH PASSWORD 'test_password';"
          docker exec postgres-test psql -U postgres -d timedeposit_test -c "GRANT ALL PRIVILEGES ON DATABASE timedeposit_test TO ahmadmuhaidat;"
          docker exec postgres-test psql -U postgres -d timedeposit_test -c "ALTER USER ahmadmuhaidat CREATEDB;"
          
          echo "‚úÖ PostgreSQL is ready"

      - name: Pull and start API container
        run: |
          echo "Pulling API image: ${{ needs.build-and-push.outputs.image-tag }}"
          
          # Pull the image from registry
          docker pull ${{ needs.build-and-push.outputs.image-tag }}
          
          # Start the API container
          docker run -d \
            --name timedeposit-api \
            --network test-network \
            -p 5000:5000 \
            -e ConnectionStrings__DefaultConnection="Host=postgres-test;Database=timedeposit_test;Username=ahmadmuhaidat;Password=test_password" \
            ${{ needs.build-and-push.outputs.image-tag }}
          
          echo "API container started"

      - name: Wait for API to be ready
        run: |
          echo "Waiting for TimeDepositAPI to be ready..."
          timeout=120
          api_ready=false
          
          while [ $timeout -gt 0 ] && [ "$api_ready" = false ]; do
            # Check if container is still running
            if ! docker ps | grep timedeposit-api > /dev/null; then
              echo "‚ùå API container stopped unexpectedly"
              docker logs timedeposit-api
              exit 1
            fi
          
            # Check health endpoint
            if curl -f http://localhost:5000/health 2>/dev/null; then
              api_ready=true
              echo "‚úÖ API health endpoint is responding"
            elif curl -s http://localhost:5000/ >/dev/null 2>&1; then
              api_ready=true
              echo "‚úÖ API root endpoint is responding"
            else
              echo "Waiting for API... ($timeout seconds left)"
              sleep 3
              timeout=$((timeout-3))
            fi
          done
          
          if [ "$api_ready" = false ]; then
            echo "‚ùå API not ready after 120 seconds"
            echo "=== API Container Logs ==="
            docker logs timedeposit-api
            echo "=== Container Status ==="
            docker ps -a
            exit 1
          fi
          
          echo "‚úÖ TimeDepositAPI is ready and running on port 5000!"

      - name: Verify API endpoints
        run: |
          echo "Testing API endpoints..."
          
          # Test health endpoint
          if curl -f http://localhost:5000/health; then
            echo "‚úÖ Health endpoint working"
          else
            echo "‚ö†Ô∏è Health endpoint not available"
          fi
          
          # Test root endpoint
          echo "Root endpoint response:"
          curl -s http://localhost:5000/ | head -5 || echo "Root endpoint not available"
          
          # Show container status
          echo "=== Container Status ==="
          docker ps
          
          # Show recent logs
          echo "=== Recent API Logs ==="
          docker logs timedeposit-api --tail 10

      - name: Clone automation test repository
        run: |
          git clone https://github.com/AhmedMohaidat/tests.git
          echo "Automation test repository cloned"

      - name: Run automation tests
        working-directory: ./tests
        run: |
          echo "üöÄ Running automation tests against API at http://localhost:5000"
          echo "Test suite: src/test/resources/TestSuites/regressionTest.xml"
          
          # Set API base URL for tests
          export API_BASE_URL=http://localhost:5000
          
          # Run Maven tests
          mvn clean install -Dfile="src/test/resources/TestSuites/regressionTest.xml" \
            -Dapi.base.url=http://localhost:5000 \
            -Dmaven.test.failure.ignore=false
          
          echo "‚úÖ Automation tests completed"
        env:
          API_BASE_URL: http://localhost:5000

      - name: Trigger external automation tests
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.AUTOMATION_REPO_TOKEN }}
          repository: AhmedMohaidat/tests
          event-type: api-deployment-complete
          client-payload: |
            {
              "api_url": "http://localhost:5000",
              "branch": "${{ github.ref_name }}",
              "commit_sha": "${{ github.sha }}",
              "api_version": "${{ github.run_number }}",
              "image_tag": "${{ needs.build-and-push.outputs.image-tag }}"
            }

      - name: Upload automation test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: automation-test-results
          path: |
            ./tests/target/surefire-reports/
            ./tests/target/failsafe-reports/
            ./tests/test-output/
          retention-days: 7

      - name: Upload API logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-logs
          path: api-logs.txt
          retention-days: 7

      - name: Collect API logs for upload
        if: always()
        run: |
          echo "=== API Container Logs ===" > api-logs.txt
          docker logs timedeposit-api >> api-logs.txt 2>&1
          echo "=== Container Status ===" >> api-logs.txt
          docker ps -a >> api-logs.txt

      - name: Stop containers
        if: always()
        run: |
          echo "Stopping containers..."
          docker stop timedeposit-api postgres-test 2>/dev/null || true
          docker rm timedeposit-api postgres-test 2>/dev/null || true
          docker network rm test-network 2>/dev/null || true
          echo "‚úÖ Cleanup completed"

  # Stage 3: Integration Tests (Optional - if you have integration tests)
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-and-test]
    if: needs.deploy-and-test.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run integration tests against deployed API
        run: |
          # Start a fresh environment for integration tests
          docker network create integration-network
          
          # Start PostgreSQL
          docker run -d \
            --name postgres-integration \
            --network integration-network \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=timedeposit_test \
            -p 5433:5432 \
            postgres:13
          
          # Wait for PostgreSQL
          timeout=60
          while ! docker exec postgres-integration pg_isready -U postgres 2>/dev/null; do
            if [ $timeout -le 0 ]; then exit 1; fi
            sleep 2
            timeout=$((timeout-2))
          done
          
          # Setup database user
          docker exec postgres-integration psql -U postgres -d timedeposit_test -c "CREATE USER ahmadmuhaidat WITH PASSWORD 'test_password';"
          docker exec postgres-integration psql -U postgres -d timedeposit_test -c "GRANT ALL PRIVILEGES ON DATABASE timedeposit_test TO ahmadmuhaidat;"
          docker exec postgres-integration psql -U postgres -d timedeposit_test -c "ALTER USER ahmadmuhaidat CREATEDB;"
          
          # Start API container
          docker run -d \
            --name timedeposit-api-integration \
            --network integration-network \
            -p 5001:5000 \
            -e ConnectionStrings__DefaultConnection="Host=postgres-integration;Database=timedeposit_test;Username=ahmadmuhaidat;Password=test_password" \
            ${{ needs.build-and-push.outputs.image-tag }}
          
          # Wait for API
          timeout=60
          while ! curl -f http://localhost:5001/health 2>/dev/null && ! curl -s http://localhost:5001/ >/dev/null 2>&1; do
            if [ $timeout -le 0 ]; then
              docker logs timedeposit-api-integration
              exit 1
            fi
            sleep 2
            timeout=$((timeout-2))
          done
          
          # Run integration tests
          dotnet test --configuration Release --verbosity normal \
            --filter "FullyQualifiedName~IntegrationTest|FullyQualifiedName~IT" \
            --logger trx --results-directory TestResults/Integration
          
          # Cleanup
          docker stop timedeposit-api-integration postgres-integration
          docker rm timedeposit-api-integration postgres-integration
          docker network rm integration-network
        env:
          API_BASE_URL: http://localhost:5001

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: TestResults/Integration/
          retention-days: 7