name: CI Pipeline - Build and Test .NET App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Stage 1: Build and Start .NET Application
  build-and-deploy:
    name: Build and Start .NET Application
    runs-on: ubuntu-latest

    services:
     postgres:
       image: postgres:13
       env:
         POSTGRES_PASSWORD: postgres
         POSTGRES_DB: testdb
       options: >-
         --health-cmd pg_isready
         --health-interval 10s
         --health-timeout 5s
         --health-retries 5
       ports:
         - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'  # Updated to .NET 9

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: dotnet build --no-restore --configuration Release

      - name: Run unit tests
        run: |
          # Run unit tests (excluding integration tests)
          dotnet test --no-build --configuration Release --verbosity normal \
            --filter "FullyQualifiedName!~IntegrationTest&FullyQualifiedName!~IT" \
            --logger trx --results-directory TestResults/Unit

      - name: Publish application
        run: |
          # Publish the TimeDepositAPI application
          dotnet publish TimeDepositAPI/TimeDepositAPI.csproj \
            --configuration Release \
            --output ./publish \
            --no-restore --no-build

      - name: Upload application artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./publish/
          retention-days: 1

      - name: Start .NET application
        run: |
          echo "Starting TimeDepositAPI application..."
          
          # Start the application in background
          cd ./publish
          dotnet TimeDepositAPI.dll --urls="http://localhost:5000" &
          echo $! > app.pid
          
          # Wait for application to be ready
          echo "Waiting for TimeDepositAPI to start..."
          timeout=60
          while ! curl -f http://localhost:5000/health 2>/dev/null; do
            if [ $timeout -le 0 ]; then
              echo "TimeDepositAPI failed to start within 60 seconds"
              # Show logs for debugging
              echo "Application logs:"
              jobs
              exit 1
            fi
            sleep 2
            timeout=$((timeout-2))
            echo "Waiting... ($timeout seconds left)"
          done
          echo "âœ… TimeDepositAPI is ready and running on port 5000!"
        env:
          ASPNETCORE_ENVIRONMENT: Development
          ASPNETCORE_URLS: http://localhost:5000

      - name: Verify application is running
        run: |
          echo "Verifying application status..."
          curl -v http://localhost:5000/health || echo "Health endpoint not available"
          echo "Application PID: $(cat ./publish/app.pid)"
          ps aux | grep dotnet

    outputs:
      app-status: success

