name: CI Pipeline - Build and Test .NET App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Combined: Build, Deploy and Test
  build-deploy-and-test:
    name: Build, Deploy and Test Time Deposit API
    runs-on: ubuntu-latest

    services:
      # PostgreSQL service for TimeDepositAPI
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: timedeposit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Set up Java 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: Create additional PostgreSQL user
        run: |
          # Wait for postgres to be ready
          sleep 10
          # Create the user that your app expects
          PGPASSWORD=postgres psql -h localhost -U postgres -d timedeposit_test -c "CREATE USER ahmadmuhaidat WITH PASSWORD 'test_password';"
          PGPASSWORD=postgres psql -h localhost -U postgres -d timedeposit_test -c "GRANT ALL PRIVILEGES ON DATABASE timedeposit_test TO ahmadmuhaidat;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d timedeposit_test -c "ALTER USER ahmadmuhaidat CREATEDB;"

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: |
          echo "📁 Current directory structure:"
          ls -la
          echo "🔍 Looking for .csproj files:"
          find . -name "*.csproj" -type f
          echo "📦 Building application..."
          dotnet build --no-restore --configuration Release

      - name: Run unit tests
        run: |
          # Run unit tests (excluding integration tests)
          dotnet test --no-build --configuration Release --verbosity normal \
            --filter "FullyQualifiedName!~IntegrationTest&FullyQualifiedName!~IT" \
            --logger trx --results-directory TestResults/Unit

      - name: Publish application
        run: |
          # Publish the TimeDepositAPI application (project file is in root)
          dotnet publish TimeDepositAPI.csproj \
            --configuration Release \
            --output ./publish \
            --no-restore --no-build

      - name: Start .NET application in background
        run: |
          echo "Starting TimeDepositAPI application..."
          
          # Start the application in background using nohup to keep it running
          cd ./publish
          nohup dotnet TimeDepositAPI.dll --urls="http://localhost:5000" > app.log 2>&1 &
          APP_PID=$!
          echo $APP_PID > app.pid
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          
          # Wait for application to be ready
          echo "Waiting for TimeDepositAPI to start..."
          timeout=60
          
          # First check if the port is responding
          while ! nc -z localhost 5000; do
            if [ $timeout -le 0 ]; then
              echo "TimeDepositAPI port 5000 not responding after 60 seconds"
              echo "=== Application Log ==="
              cat app.log || echo "No log file found"
              ps aux | grep dotnet
              exit 1
            fi
            sleep 2
            timeout=$((timeout-2))
            echo "Waiting for port 5000... ($timeout seconds left)"
          done
          
          echo "✅ Port 5000 is responding"
          
          # Try to access any endpoint to verify app is working
          echo "Testing API endpoints..."
          if curl -f http://localhost:5000/health 2>/dev/null; then
            echo "✅ Health endpoint is working"
          elif curl -f http://localhost:5000/ 2>/dev/null; then
            echo "✅ Root endpoint is working"
          elif curl -s http://localhost:5000/ | head -5; then
            echo "✅ Application is responding (got some response)"
          else
            echo "⚠️ Application started but endpoints may not be configured - continuing anyway"
          fi
          
          echo "✅ TimeDepositAPI is ready and running on port 5000!"
          echo "Application PID: $APP_PID"
        env:
          ASPNETCORE_ENVIRONMENT: Testing
          ASPNETCORE_URLS: http://localhost:5000
          ConnectionStrings__DefaultConnection: "Host=localhost;Database=timedeposit_test;Username=ahmadmuhaidat;Password=test_password"

      - name: Verify application is running
        run: |
          echo "Verifying application status..."
          curl -v http://localhost:5000/health || echo "Health endpoint not available"
          echo "Application PID: $APP_PID"
          ps aux | grep dotnet | grep TimeDepositAPI || echo "Application process not found in ps"

      - name: Clone automation test repository
        run: |
          git clone https://github.com/AhmedMohaidat/tests.git
          echo "Automation test repository cloned successfully"

      - name: Run automation tests
        working-directory: ./tests
        run: |
          echo "🚀 Running automation tests against API at http://localhost:5000"
          echo "Test suite: src/test/resources/TestSuites/regressionTest.xml"
          
          # Verify API is still accessible before running tests
          if curl -f http://localhost:5000/health 2>/dev/null || curl -s http://localhost:5000/ >/dev/null 2>&1; then
            echo "✅ API is accessible, proceeding with tests"
          else
            echo "❌ API is not accessible, checking logs..."
            cat ../publish/app.log || echo "No log file found"
            ps aux | grep dotnet
            exit 1
          fi
          
          # Run Maven tests with API base URL
          mvn clean install -Dfile="src/test/resources/TestSuites/regressionTest.xml" \
            -Dapi.base.url=http://localhost:5000 \
            -Dmaven.test.failure.ignore=false
          
          echo "✅ Automation tests completed successfully"
        env:
          API_BASE_URL: http://localhost:5000

      - name: Trigger external automation tests (optional)
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.AUTOMATION_REPO_TOKEN }}
          repository: AhmedMohaidat/tests
          event-type: api-deployment-complete
          client-payload: |
            {
              "api_url": "http://localhost:5000",
              "branch": "${{ github.ref_name }}",
              "commit_sha": "${{ github.sha }}",
              "api_version": "${{ github.run_number }}"
            }

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            TestResults/Unit/
            ./tests/target/surefire-reports/
            ./tests/target/failsafe-reports/
            ./tests/test-output/
          retention-days: 7

      - name: Upload application logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: application-logs
          path: |
            ./publish/app.log
            ./publish/app.pid
          retention-days: 7

      - name: Upload published application
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./publish/
          retention-days: 3

      - name: Final status check
        if: always()
        run: |
          echo "=== Final Pipeline Status ==="
          echo "Application PID: $APP_PID"
          
          if [ -n "$APP_PID" ] && kill -0 $APP_PID 2>/dev/null; then
            echo "✅ Application is still running"
            echo "Recent application logs:"
            tail -20 ./publish/app.log || echo "No recent logs"
          else
            echo "⚠️ Application process not found"
          fi
          
          echo "=== Test Results Summary ==="
          if [ -d "./tests/target/surefire-reports/" ]; then
            echo "Surefire reports found:"
            ls -la ./tests/target/surefire-reports/ | head -10
          fi
          
          if [ -d "TestResults/Unit/" ]; then
            echo "Unit test results found:"
            ls -la TestResults/Unit/ | head -10
          fi
          
          echo "✅ Pipeline completed - check artifacts for detailed results"

      - name: Stop application
        if: always()
        run: |
          if [ -n "$APP_PID" ] && kill -0 $APP_PID 2>/dev/null; then
            echo "Stopping application (PID: $APP_PID)"
            kill $APP_PID
          
            # Wait a moment for graceful shutdown
            sleep 3
          
            # Force kill if still running
            if kill -0 $APP_PID 2>/dev/null; then
              echo "Force killing application"
              kill -9 $APP_PID
            fi
          
            echo "✅ Application stopped"
          else
            echo "Application already stopped or PID not found"
          fi