name: CI Pipeline - Build and Test .NET App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Stage 1: Build and Start .NET Application
  build-and-deploy:
    name: Build and Start .NET Application
    runs-on: ubuntu-latest

    services:
      # PostgreSQL service for TimeDepositAPI
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: timedeposit_test
          # Create additional user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Create additional PostgreSQL user
        run: |
          # Wait for postgres to be ready
          sleep 10
          # Create the user that your app expects
          PGPASSWORD=postgres psql -h localhost -U postgres -d timedeposit_test -c "CREATE USER ahmadmuhaidat WITH PASSWORD 'test_password';"
          PGPASSWORD=postgres psql -h localhost -U postgres -d timedeposit_test -c "GRANT ALL PRIVILEGES ON DATABASE timedeposit_test TO ahmadmuhaidat;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d timedeposit_test -c "ALTER USER ahmadmuhaidat CREATEDB;"  # Updated to .NET 9

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: |
          echo "üìÅ Current directory structure:"
          ls -la
          echo "üîç Looking for .csproj files:"
          find . -name "*.csproj" -type f
          echo "üì¶ Building application..."
          dotnet build --no-restore --configuration Release

      - name: Run unit tests
        run: |
          # Run unit tests (excluding integration tests)
          dotnet test --no-build --configuration Release --verbosity normal \
            --filter "FullyQualifiedName!~IntegrationTest&FullyQualifiedName!~IT" \
            --logger trx --results-directory TestResults/Unit

      - name: Publish application
        run: |
          # Publish the TimeDepositAPI application (project file is in root)
          dotnet publish TimeDepositAPI.csproj \
            --configuration Release \
            --output ./publish \
            --no-restore --no-build

      - name: Upload application artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./publish/
          retention-days: 1

      - name: Start .NET application
        run: |
          echo "Starting TimeDepositAPI application..."
          
          # Start the application in background
          cd ./publish
          dotnet TimeDepositAPI.dll --urls="http://localhost:5000" &
          echo $! > app.pid
          
          # Wait for application to be ready
          echo "Waiting for TimeDepositAPI to start..."
          timeout=60
          
          # First check if the port is responding
          while ! nc -z localhost 5000; do
            if [ $timeout -le 0 ]; then
              echo "TimeDepositAPI port 5000 not responding after 60 seconds"
              jobs
              exit 1
            fi
            sleep 2
            timeout=$((timeout-2))
            echo "Waiting for port 5000... ($timeout seconds left)"
          done
          
          echo "‚úÖ Port 5000 is responding"
          
          # Try to access any endpoint to verify app is working
          echo "Testing API endpoints..."
          if curl -f http://localhost:5000/health 2>/dev/null; then
            echo "‚úÖ Health endpoint is working"
          elif curl -f http://localhost:5000/ 2>/dev/null; then
            echo "‚úÖ Root endpoint is working"
          elif curl -s http://localhost:5000/ | head -5; then
            echo "‚úÖ Application is responding (got some response)"
          else
            echo "‚ö†Ô∏è Application started but endpoints may not be configured - continuing anyway"
          fi
          
          echo "‚úÖ TimeDepositAPI is ready and running on port 5000!"
        env:
          ASPNETCORE_ENVIRONMENT: Testing
          ASPNETCORE_URLS: http://localhost:5000
          # Use the custom user your app expects
          ConnectionStrings__DefaultConnection: "Host=localhost;Database=timedeposit_test;Username=ahmadmuhaidat;Password=test_password"

      - name: Verify application is running
        run: |
          echo "Verifying application status..."
          curl -v http://localhost:5000/health || echo "Health endpoint not available"
          echo "Application PID: $(cat ./publish/app.pid)"
          ps aux | grep dotnet

    outputs:
      app-status: success

  # Stage 2: Trigger External Automation Tests
  trigger-automation-tests:
    name: Trigger External REST Assured Tests
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: needs.build-and-deploy.result == 'success'

    steps:
      - name: Trigger automation tests in external repository
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.AUTOMATION_REPO_TOKEN }}
          repository: https://github.com/AhmedMohaidat/tests
          event-type: api-deployment-complete
          client-payload: |
            {
              "api_url": "http://localhost:5000",
              "branch": "${{ github.ref_name }}",
              "commit_sha": "${{ github.sha }}",
              "api_version": "${{ github.run_number }}"
            }

      - name: Wait for test results (optional)
        run: |
          echo "‚úÖ Automation tests triggered in external repository"
          echo "Check the automation test repository for results"
          echo "API URL: http://localhost:5000"
